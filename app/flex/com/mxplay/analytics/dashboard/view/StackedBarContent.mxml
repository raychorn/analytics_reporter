<?xml version="1.0" encoding="utf-8"?>
<!--
 Displays a form and DataGrid using a ViewStack.
 The form and DataGrid use the same dataProvider and provide
 alternative ways to navigate through a set of data.
-->
<PodContentBase
	xmlns="com.mxplay.analytics.dashboard.view.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import mx.charts.LinearAxis;
			import mx.charts.series.ColumnSet;
			import mx.charts.series.ColumnSeries;
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;
			
			import com.mxplay.analytics.events.DateChangeEvent;
			
			[Bindable]
			private var dataFields:ArrayCollection;
			
			[Bindable]
			private var labelFields:ArrayCollection;
			[Bindable]
			private var dataProvider:ArrayCollection;
			
			[Bindable]
			private var selectedViewIndex:Number = 0;
			
			[Bindable]
			private var _selectedIndex:Number = -1;
			
			[Bindable]
			private var addingRecord:Boolean;
			
			//[Bindable] private var xField:String = "subPoP"; 
			//[Bindable] private var yField:Array = new Array("G3", "G2");
			//[Bindable] private var displayName:Array = new Array("3G", "2G");
			[Bindable] private var xField:String; 
			[Bindable] private var yField:ArrayCollection;
			[Bindable] private var displayName:ArrayCollection;
			
			private var dateFormatter:DateFormatter;
			
			private const NEW:String = "New";
			private const ADD:String = "Add";
			
			override protected function onResultHttpService(e:ResultEvent):void
			{
				//DateChange Event Listener 
				mx.core.Application.application.addEventListener(DateChangeEvent.DATECHANGE, dateChangeHandler);
				
				dateFormatter = new DateFormatter();
				dateFormatter.formatString = "MM/DD/YY";
				
				var a:Array = xmlListToObjectArray(e.result.record);
				dataProvider = new ArrayCollection(a);
				
				// Get the values from properties XML.
				a = properties.@dataFields.toString().split(",");
				dataFields = new ArrayCollection(a);
				//Alert.show(dataFields.getItemAt(1).toString(), "Error");
				var labels:Array = properties.@labels.toString().split(",");
				labelFields = new ArrayCollection(labels);
				// for stacked bar chart
				var xFields:String = properties.@xField.toString();
				xField = new String(xFields);
				var yFields:Array = properties.@yField.toString().split(",");
				yField = new ArrayCollection(yFields);
				var displayNames:Array = properties.@displayName.toString().split(",");
				displayName = new ArrayCollection(displayNames);
				
				selectedIndex = 0;
				if (properties.@selectedViewIndex.toString() != null &&
					Number(properties.@selectedViewIndex) <= (viewStack.numChildren - 1)) // Make sure the index is in range.
				{
					//Alert.show(properties.@selectedViewIndex.toString(), "errpr");
					selectedViewIndex = Number(properties.@selectedViewIndex);
				}
				
				// add columns
				addBar();
			}
			
			public function dateChangeHandler(e:DateChangeEvent):void {
				stackedBarChart.series = null;
				onDateChange(e.startdate, e.enddate);
			}
			
			private function addBar():void
			{
				var cs:ColumnSeries;
				var tmp:Array = stackedBarChart.series;
				
				for(var i:int=0; i<yField.length; i++) {
					cs = new ColumnSeries();
					cs.xField = xField;
					cs.yField = yField[i];
					cs.displayName = displayName[i];
					cs.dataProvider = dataProvider;
					tmp.push(cs);
				}
				stackedBarChart.series = tmp;
			}
			private function set selectedIndex(n:Number):void
			{
				addingRecord = false;
				
				// Make sure we are within range of dataProvider.
				if (n < 0)
					n = dataProvider.length - 1;
				else if (n > (dataProvider.length - 1))
					n = 0;

				var item:Object = dataProvider.getItemAt(n);
				_selectedIndex = n;
			}
			
			private function get selectedIndex():Number
			{
				return _selectedIndex;
			}
									
			private function formatDate(item:Object, column:DataGridColumn):String
			{
				return dateFormatter.format(item[column.dataField]);
			}
		]]>
	</mx:Script>
	<mx:ViewStack
		id="viewStack"
		selectedIndex="{selectedViewIndex}"
		width="100%" height="100%">
		<mx:Canvas>
			<mx:VBox height="100%" width="100%">
			<mx:ColumnChart type="stacked"  
				id="stackedBarChart"
				width="100%" height="100%"
				dataProvider="{dataProvider}"
				showDataTips="true">
				 <mx:horizontalAxis>
		           <mx:CategoryAxis dataProvider="{dataProvider}" categoryField="{xField}" />
		        </mx:horizontalAxis>
		        
		        <!-- For axis minimum, maximum, and interval -->
		        <mx:verticalAxis>
		        	<mx:LinearAxis id="v1" maximum="100" title="percentage(%)" />	
		        </mx:verticalAxis>
				
				<!-- ================================== -->
				<!--
		        <mx:series> 
					<mx:ColumnSet type="stacked">
						 <mx:series>
		                    <mx:ColumnSeries 
		                        xField="{xField}" 
		                        yField="{yField[0]}"  
		                        displayName="{displayName}" 
		                    />
		                    <mx:ColumnSeries 
		                        xField="{xField}" 
		                        yField="{yField[0]}"  
		                        displayName="{displayName}" 
		                    /> 
	                	</mx:series>
	                	
					</mx:ColumnSet>	
				</mx:series>
				-->
			</mx:ColumnChart>
			<mx:Legend dataProvider="{stackedBarChart}" direction="horizontal" />
			</mx:VBox>
		</mx:Canvas>
	</mx:ViewStack>
</PodContentBase>